public class Solution {

    ArrayList<ArrayList<Integer>> ans = new ArrayList<ArrayList<Integer>>();
    public ArrayList<ArrayList<Integer>> combinationSum(ArrayList<Integer> A, int B) {        
        ArrayList<Integer> temp = new ArrayList<>();
        int N = A.size();
        int sum = 0;
        int pos = 0;
        generateCombination(A,temp,N,B,sum,pos);        
        Collections.sort(ans,new sort2ArrayList());
        return ans;
    }

    void generateCombination(ArrayList<Integer> A, ArrayList<Integer> temp, int N, int B,int sum,int pos){
        //base condition
        if(sum == B){
            ArrayList<Integer> newList = new ArrayList<>();
            Collections.sort(temp);
            for(int i = 0 ; i < temp.size();i++){
                newList.add(temp.get(i));
            }
            ans.add(newList);
            return;
        }
        if(pos == N || sum > B){
            return;
        }

        //pick and move to next element
        sum = sum + A.get(pos);
        temp.add(A.get(pos));
        generateCombination(A,temp,N,B,sum,pos+1);

        //pick and no movement
        sum = sum + A.get(pos);
        temp.add(A.get(pos));
        generateCombination(A,temp,N,B,sum,pos);


        //leave and move to next element    
        sum  = sum - 2*A.get(pos);
        temp.remove(temp.size()-1);
        temp.remove(temp.size()-1);
        generateCombination(A,temp,N,B,sum,pos+1);
    }
}

class sort2ArrayList implements Comparator<ArrayList<Integer>>{
    public int compare(ArrayList<Integer> list1, ArrayList<Integer> list2){

        int n1 = list1.size();
        int n2 = list2.size();

        int i = 0;
        int j = 0;
        while(i > n1 && j > n2){
            if(list1.get(i) > list2.get(j)){
                return 1;
            }
            else if(list1.get(i) < list2.get(j)){
                return -1;
            }
            i++;
            j++;
        }
        return 0;
    }
}

